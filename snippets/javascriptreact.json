{
  "anonymousFunction": {
    "body": ["(${1:first}) => { ${2:second} }"],
    "description": "Creates an anonymous function",
    "prefix": "anfn"
  },
  "bindThis": {
    "body": ["this.${1:first} = this.${1:first}.bind(this)"],
    "description": "Binds this to a method",
    "prefix": "bnd"
  },
  "classConstructor": {
    "body": [
      "constructor(props) {",
      "  super(props)",
      "",
      "  this.state = {",
      "     ${1:first}",
      "  }",
      "}"
    ],
    "description": "Adds a default constructor for it('', () => {})the class that contains props as arguments",
    "prefix": "rconst"
  },
  "classConstructor": {
    "body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments",
    "prefix": "con"
  },
  "classConstructorContext": {
    "body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments",
    "prefix": "conc"
  },
  "commentBigBlock": {
    "body": ["/**", " * ${1:first}", " */"],
    "prefix": "cmmb"
  },
  "componentDidMount": {
    "body": ["componentDidMount() { ${1:first} }"],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
    "prefix": "cdm"
  },
  "componentDidMount": {
    "body": "componentDidMount () {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
    "prefix": "cdm"
  },
  "componentDidUpdate": {
    "body": ["componentDidUpdate(prevProps, prevState) { ${1:first}} "],
    "description": "Invoked immediately after the component's updates are flushed to the DOM.",
    "prefix": "cdup"
  },
  "componentDidUpdate": {
    "body": "componentDidUpdate (prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM.",
    "prefix": "cdup"
  },
  "componentGetDerivedStateFromProps": {
    "body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates.",
    "prefix": "cgd"
  },
  "componentProps": {
    "body": ["this.props.${1:first}"],
    "description": "Access component's props",
    "prefix": "props"
  },
  "componentProps": {
    "body": "this.props.$0",
    "description": "Access component's props",
    "prefix": "tp"
  },
  "componentRender": {
    "body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element.",
    "prefix": "ren"
  },
  "componentSetStateFunc": {
    "body": ["this.setState((state, props) => { return { ${1:first} }})"],
    "description": "Performs a shallow merge of nextState into current state",
    "prefix": "ssf"
  },
  "componentSetStateFunc": {
    "body": "this.setState((state, props) => { return { $0 }})\n",
    "description": "Performs a shallow merge of nextState into current state",
    "prefix": "ssf"
  },
  "componentSetStateObject": {
    "body": ["this.setState({${1:first}})"],
    "description": "Performs a shallow merge of nextState into current state",
    "prefix": "sst"
  },
  "componentSetStateObject": {
    "body": "this.setState($0)",
    "description": "Performs a shallow merge of nextState into current state",
    "prefix": "sst"
  },
  "componentState": {
    "body": ["this.state.${1:first}"],
    "prefix": "state"
  },
  "componentState": {
    "body": "this.state.$0",
    "description": "Access component's state",
    "prefix": "ts"
  },
  "componentWillMount": {
    "body": "\ncomponentWillMount () {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs",
    "prefix": "cwm"
  },
  "componentWillReceiveProps": {
    "body": "componentWillReceiveProps (nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render.",
    "prefix": "cwr"
  },
  "componentWillUnmount": {
    "body": ["componentWillUnmount() {${1:first} }"],
    "description": "Invoked immediately before a component is unmounted from the DOM.",
    "prefix": "cwun"
  },
  "componentWillUnmount": {
    "body": "componentWillUnmount () {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM.",
    "prefix": "cwun"
  },
  "componentWillUpdate": {
    "body": "componentWillUpdate (nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received.",
    "prefix": "cwup"
  },
  "consoleAssert": {
    "body": ["console.assert(${1:first}, ${2:second})"],
    "description": "If the specified expression is false, the message is written to the console along with a stack trace",
    "prefix": "cas"
  },
  "consoleClear": {
    "body": ["console.clear()"],
    "description": "Clears the console",
    "prefix": "ccl"
  },
  "consoleCount": {
    "body": ["console.count(${1:first})"],
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
    "prefix": "cco"
  },
  "consoleDir": {
    "body": ["console.dir(${1:first})"],
    "description": "Prints a JavaScript representation of the specified object",
    "prefix": "cdi"
  },
  "consoleError": {
    "body": ["console.error(${1:first})"],
    "description": "Displays a message in the console and also includes a stack trace from where the method was called",
    "prefix": "cer"
  },
  "consoleGroup": {
    "body": ["console.group('${1:first}')"],
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
    "prefix": "cgr"
  },
  "consoleGroupEnd": {
    "body": ["console.groupEnd()"],
    "description": "Closes out the corresponding console.group().",
    "prefix": "cge"
  },
  "consoleInfo": {
    "body": ["console.info(${1:first})"],
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message",
    "prefix": "cin"
  },
  "consoleLog": {
    "body": ["console.log(${1:first})"],
    "description": "Displays a message in the console",
    "prefix": "clg"
  },
  "consoleLogJson": {
    "body": ["console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"],
    "description": "Logs stringified JSON property with name.",
    "prefix": "clj"
  },
  "consoleLogObject": {
    "body": ["console.log('${1:first}', ${1:first})"],
    "description": "Logs property with name.",
    "prefix": "clo"
  },
  "consoleTable": {
    "body": ["console.table([${1:first}])"],
    "description": "Logs table to console",
    "prefix": "ctl"
  },
  "consoleTime": {
    "body": ["console.time('${1:first}')"],
    "description": "Console time wrapper",
    "prefix": "ctm"
  },
  "consoleTimeEnd": {
    "body": ["console.timeEnd('${1:first}')"],
    "description": "Console time end wrapper",
    "prefix": "cte"
  },
  "consoleTrace": {
    "body": ["console.trace(${1:first})"],
    "description": "Prints a stack trace from the point where the method was called",
    "prefix": "ctr"
  },
  "consoleWarn": {
    "body": ["console.warn(${1:first})"],
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
    "prefix": "cwa"
  },
  "createContext": {
    "body": ["const ${1:first} = React.createContext()"],
    "description": "Create React context",
    "prefix": "rcontext"
  },
  "createRef": {
    "body": ["this.${1:first}Ref = React.createRef()"],
    "description": "Create ref statement used inside constructor",
    "prefix": "cref"
  },
  "describeBlock": {
    "body": ["describe('${1:first}', () => { ${2:second} })"],
    "description": "Testing `describe` block",
    "prefix": "desc"
  },
  "describeBlock": {
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "Testing `describe` block",
    "prefix": "desc"
  },
  "destructingArray": {
    "body": ["const [${2:second}] = ${1:first}"],
    "description": "Creates and assigns a local variable using array destructing",
    "prefix": "dar"
  },
  "destructingObject": {
    "body": ["const {${2:second}} = ${1:first}"],
    "description": "Creates and assigns a local variable using object destructing",
    "prefix": "dob"
  },
  "destructProps": {
    "body": ["const { ${1:first} } = this.props"],
    "description": "Creates and assigns a local variable using props destructing",
    "prefix": "cp"
  },
  "destructState": {
    "body": ["const { ${1:first} } = this.state"],
    "description": "Creates and assigns a local variable using state destructing",
    "prefix": "cs"
  },
  "destructuring of props": {
    "body": ["const { ${1:name} } = this.props"],
    "prefix": "dp"
  },
  "destructuring of state": {
    "body": ["const { ${1:name} } = this.state"],
    "prefix": "ds"
  },
  "emptyState": {
    "body": ["state = { ${1:first} }"],
    "description": "Creates empty state object. To be used in a constructor.",
    "prefix": "est"
  },
  "exportAs": {
    "body": ["export { ${2:second} as ${3:third} } from '${1:first}'"],
    "prefix": "exa"
  },
  "exportDefault": {
    "body": ["export default ${1:first}"],
    "prefix": "exp"
  },
  "exportDefaultFunction": {
    "body": ["export default (${1:first}) => {${2:second}}"],
    "description": "Export default function",
    "prefix": "edf"
  },
  "exportDefaultNamedFunction": {
    "body": ["export default function ${1:first}(${2:second}) {${3:third}}"],
    "description": "Export default named function",
    "prefix": "ednf"
  },
  "exportDestructing": {
    "body": ["export { ${2:second} } from '${1:first}'"],
    "prefix": "exd"
  },
  "exportInterface": {
    "body": ["export interface ${1:first} {${2:second}}"],
    "prefix": "expint"
  },
  "exportNamedFunction": {
    "body": ["export const ${1:first} = (${2:second}) => {${3:third}}"],
    "description": "Export named function",
    "prefix": "enf"
  },
  "exportType": {
    "body": ["export type ${1:first} = {${2:second}}"],
    "prefix": "exptp"
  },
  "forEach": {
    "body": ["${1:first}.forEach(${2:second} => {${3:third}})"],
    "description": "Creates a forEach statement",
    "prefix": "fre"
  },
  "forIn": {
    "body": ["for(let ${1:first} in ${2:second}) {${3:third}}"],
    "description": "Iterating over property values of iterable objects",
    "prefix": "fin"
  },
  "forOf": {
    "body": ["for(let ${1:first} of ${2:second}) {${3:third}}"],
    "description": "Iterating over property names of iterable objects",
    "prefix": "fof"
  },
  "getDerivedStateFromProps": {
    "body": ["static getDerivedStateFromProps(props, state) {${1:first}}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates.",
    "prefix": "gdsfp"
  },
  "getSnapshotBeforeUpdate": {
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {${1:first}}"
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)",
    "prefix": "gsbu"
  },
  "hocComponent": {
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      ""
    ],
    "prefix": "hoc"
  },
  "hocComponentWithRedux": {
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "import PropTypes from 'prop-types'",
      "",
      "export const mapStateToProps = state => ({})",
      "",
      "export const mapDispatchToProps = {}",
      "",
      "export const ${1:first} = (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:first}(WrapperComponent))",
      ""
    ],
    "prefix": "hocredux"
  },
  "if falsy return null": {
    "body": "if (!${1:condition}) {\n\treturn null\n}",
    "prefix": "ifr"
  },
  "import": {
    "body": ["import ${2:second} from '${1:first}'"],
    "prefix": "imp"
  },
  "importAs": {
    "body": ["import { ${2:second} as ${3:third} } from '${1:first}'"],
    "prefix": "ima"
  },
  "importBrowserRouter": {
    "body": ["import { BrowserRouter as Router } from 'react-router-dom'"],
    "prefix": "imbr"
  },
  "importBrowserRouterWithRouteAndNavLink": {
    "body": [
      "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
      ""
    ],
    "prefix": "imrr"
  },
  "importDestructing": {
    "body": ["import { ${2:second} } from '${1:first}'"],
    "prefix": "imd"
  },
  "importEverything": {
    "body": ["import * as ${2:second} from '${1:first}'"],
    "prefix": "ime"
  },
  "importNoModuleName": {
    "body": ["import '${1:first}'"],
    "prefix": "imn"
  },
  "importPropTypes": {
    "body": ["import PropTypes from 'prop-types'"],
    "prefix": "impt"
  },
  "importReact": {
    "body": ["import React from 'react'"],
    "prefix": "imr"
  },
  "importReactDom": {
    "body": ["import ReactDOM from 'react-dom'"],
    "prefix": "imrd"
  },
  "importReactWithComponent": {
    "body": ["import React, { Component } from 'react'"],
    "prefix": "imrc"
  },
  "importReactWithComponentAndPropTypes": {
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ],
    "prefix": "imrcp"
  },
  "importReactWithMemo": {
    "body": ["import React, { memo } from 'react'"],
    "prefix": "imrm"
  },
  "importReactWithMemoAndPropTypes": {
    "body": [
      "import React, { memo } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ],
    "prefix": "imrmp"
  },
  "importReactWithPureComponent": {
    "body": ["import React, { PureComponent } from 'react'"],
    "prefix": "imrpc"
  },
  "importReactWithPureComponentAndPropTypes": {
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ],
    "prefix": "imrpcp"
  },
  "importReduxConnect": {
    "body": ["import { connect } from 'react-redux'"],
    "prefix": "redux"
  },
  "importRouterLink": {
    "body": ["import { Link } from 'react-router-dom'"],
    "prefix": "imbrl"
  },
  "importRouterNavLink": {
    "body": ["import { NavLink } from 'react-router-dom'"],
    "prefix": "imbrnl"
  },
  "importRouterSetup": {
    "body": ["import { Route, Switch, NavLink, Link } from 'react-router-dom'"],
    "prefix": "imbrc"
  },
  "importRouterSwitch": {
    "body": ["import { Switch } from 'react-router-dom'"],
    "prefix": "imbrs"
  },
  "itAsyncBlock": {
    "body": ["it('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing asynchronous `it` block",
    "prefix": "tita"
  },
  "itAsyncBlock": {
    "body": ["it('should $1', async () => {", "  $0", "})", ""],
    "description": "Testing async `it` block",
    "prefix": "tita"
  },
  "itBlock": {
    "body": ["it('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `it` block",
    "prefix": "tit"
  },
  "itBlock": {
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block",
    "prefix": "tit"
  },
  "jsx element": {
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element",
    "prefix": "j"
  },
  "jsx element self closed": {
    "body": "<${1:elementName} />",
    "description": "an element self closed",
    "prefix": "jc"
  },
  "jsx element wrap selection": {
    "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
    "description": "an element",
    "prefix": "jsx wrap selection with element"
  },
  "jsx elements map": {
    "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
    "description": "an element self closed",
    "prefix": "jm"
  },
  "jsx elements map with return": {
    "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
    "description": "an element self closed",
    "prefix": "jmr"
  },
  "mappingToProps": {
    "body": [
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}"
    ],
    "prefix": "reduxmap"
  },
  "method": {
    "body": ["${1:first} = (${2:second}) => {${3:third}}"],
    "description": "Creates a method inside a class",
    "prefix": "met"
  },
  "namedFunction": {
    "body": ["const ${1:first} = (${2:second}) => { ${3:third} }"],
    "description": "Creates a named function",
    "prefix": "nfn"
  },
  "promise": {
    "body": ["return new Promise((resolve, reject) => { ${1:first} })"],
    "description": "Creates and returns a new Promise in the standard ES7 syntax",
    "prefix": "prom"
  },
  "propertyGet": {
    "body": ["get ${1:first}() {", "  return this.${2:second}", "}"],
    "description": "Creates a getter property inside a class",
    "prefix": "pge"
  },
  "propertySet": {
    "body": ["set ${1:first}(${2:second}) {${3:third}}"],
    "description": "Creates a setter property inside a class",
    "prefix": "pse"
  },
  "propTypeAny": {
    "body": ["PropTypes.any"],
    "description": "Any prop type",
    "prefix": "ptany"
  },
  "propTypeArray": {
    "body": ["PropTypes.array"],
    "description": "Array prop type",
    "prefix": "pta"
  },
  "propTypeArray": {
    "body": "PropTypes.array,",
    "description": "Array prop type",
    "prefix": "pta"
  },
  "propTypeArrayOf": {
    "body": ["PropTypes.arrayOf($0)"],
    "description": "An array of a certain type",
    "prefix": "ptao"
  },
  "propTypeArrayOf": {
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type",
    "prefix": "ptao"
  },
  "propTypeArrayOfRequired": {
    "body": ["PropTypes.arrayOf($0).isRequired"],
    "description": "An array of a certain type required",
    "prefix": "ptaor"
  },
  "propTypeArrayOfRequired": {
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required",
    "prefix": "ptaor"
  },
  "propTypeArrayRequired": {
    "body": ["PropTypes.array.isRequired"],
    "description": "Array prop type required",
    "prefix": "ptar"
  },
  "propTypeArrayRequired": {
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required",
    "prefix": "ptar"
  },
  "propTypeBool": {
    "body": ["PropTypes.bool"],
    "description": "Bool prop type",
    "prefix": "ptb"
  },
  "propTypeBool": {
    "body": "PropTypes.bool,",
    "description": "Bool prop type",
    "prefix": "ptb"
  },
  "propTypeBoolRequired": {
    "body": ["PropTypes.bool.isRequired"],
    "description": "Bool prop type required",
    "prefix": "ptbr"
  },
  "propTypeBoolRequired": {
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required",
    "prefix": "ptbr"
  },
  "propTypeElement": {
    "body": ["PropTypes.element"],
    "description": "React element prop type",
    "prefix": "ptel"
  },
  "propTypeElement": {
    "body": "PropTypes.element,",
    "description": "React element prop type",
    "prefix": "ptel"
  },
  "propTypeElementRequired": {
    "body": ["PropTypes.element.isRequired"],
    "description": "React element prop type required",
    "prefix": "ptelr"
  },
  "propTypeElementRequired": {
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required",
    "prefix": "ptelr"
  },
  "propTypeEnum": {
    "body": ["PropTypes.oneOf(['$0'])"],
    "description": "Prop type limited to specific values by treating it as an enum",
    "prefix": "pte"
  },
  "propTypeEnum": {
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum",
    "prefix": "pte"
  },
  "propTypeEnumRequired": {
    "body": ["PropTypes.oneOf(['$0']).isRequired"],
    "description": "Prop type limited to specific values by treating it as an enum required",
    "prefix": "pter"
  },
  "propTypeEnumRequired": {
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required",
    "prefix": "pter"
  },
  "propTypeExact": {
    "body": ["PropTypes.exact({", "  $0", "})"],
    "description": "An object with warnings on extra properties",
    "prefix": "ptex"
  },
  "propTypeExactRequired": {
    "body": ["PropTypes.exact({", "  $0", "}).isRequired"],
    "description": "An object with warnings on extra properties required",
    "prefix": "ptexr"
  },
  "propTypeFunc": {
    "body": ["PropTypes.func"],
    "description": "Func prop type",
    "prefix": "ptf"
  },
  "propTypeFunc": {
    "body": "PropTypes.func,",
    "description": "Func prop type",
    "prefix": "ptf"
  },
  "propTypeFuncRequired": {
    "body": ["PropTypes.func.isRequired"],
    "description": "Func prop type required",
    "prefix": "ptfr"
  },
  "propTypeFuncRequired": {
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required",
    "prefix": "ptfr"
  },
  "propTypeInstanceOf": {
    "body": ["PropTypes.instanceOf($0)"],
    "description": "Is an instance of a class prop type",
    "prefix": "pti"
  },
  "propTypeInstanceOf": {
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type",
    "prefix": "pti"
  },
  "propTypeInstanceOfRequired": {
    "body": ["PropTypes.instanceOf($0).isRequired"],
    "description": "Is an instance of a class prop type required",
    "prefix": "ptir"
  },
  "propTypeInstanceOfRequired": {
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required",
    "prefix": "ptir"
  },
  "propTypeNode": {
    "body": ["PropTypes.node"],
    "description": "Anything that can be rendered: numbers, strings, elements or an array",
    "prefix": "ptnd"
  },
  "propTypeNode": {
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array",
    "prefix": "ptnd"
  },
  "propTypeNodeRequired": {
    "body": ["PropTypes.node.isRequired"],
    "description": "Anything that can be rendered: numbers, strings, elements or an array required",
    "prefix": "ptndr"
  },
  "propTypeNodeRequired": {
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required",
    "prefix": "ptndr"
  },
  "propTypeNumber": {
    "body": ["PropTypes.number"],
    "description": "Number prop type",
    "prefix": "ptn"
  },
  "propTypeNumber": {
    "body": "PropTypes.number,",
    "description": "Number prop type",
    "prefix": "ptn"
  },
  "propTypeNumberRequired": {
    "body": ["PropTypes.number.isRequired"],
    "description": "Number prop type required",
    "prefix": "ptnr"
  },
  "propTypeNumberRequired": {
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required",
    "prefix": "ptnr"
  },
  "propTypeObject": {
    "body": ["PropTypes.object"],
    "description": "Object prop type",
    "prefix": "pto"
  },
  "propTypeObject": {
    "body": "PropTypes.object,",
    "description": "Object prop type",
    "prefix": "pto"
  },
  "propTypeObjectOf": {
    "body": ["PropTypes.objectOf($0)"],
    "description": "An object with property values of a certain type",
    "prefix": "ptoo"
  },
  "propTypeObjectOf": {
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type",
    "prefix": "ptoo"
  },
  "propTypeObjectOfRequired": {
    "body": ["PropTypes.objectOf($0).isRequired"],
    "description": "An object with property values of a certain type required",
    "prefix": "ptoor"
  },
  "propTypeObjectOfRequired": {
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required",
    "prefix": "ptoor"
  },
  "propTypeObjectRequired": {
    "body": ["PropTypes.object.isRequired"],
    "description": "Object prop type required",
    "prefix": "ptor"
  },
  "propTypeObjectRequired": {
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required",
    "prefix": "ptor"
  },
  "propTypeOneOfType": {
    "body": ["PropTypes.oneOfType([", "  $0", "])"],
    "description": "An object that could be one of many types",
    "prefix": "ptet"
  },
  "propTypeOneOfType": {
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types",
    "prefix": "ptet"
  },
  "propTypeOneOfTypeRequired": {
    "body": ["PropTypes.oneOfType([", "  $0", "]).isRequired"],
    "description": "An object that could be one of many types required",
    "prefix": "ptetr"
  },
  "propTypeOneOfTypeRequired": {
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required",
    "prefix": "ptetr"
  },
  "propTypes": {
    "body": "$1.propTypes = {\n\t$2\n}",
    "description": "Creates empty propTypes declaration",
    "prefix": "rpt"
  },
  "propTypeShape": {
    "body": ["PropTypes.shape({", "  $0", "})"],
    "description": "An object taking on a particular shape",
    "prefix": "ptsh"
  },
  "propTypeShape": {
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape",
    "prefix": "ptsh"
  },
  "propTypeShapeRequired": {
    "body": ["PropTypes.shape({", "  $0", "}).isRequired"],
    "description": "An object taking on a particular shape required",
    "prefix": "ptshr"
  },
  "propTypeShapeRequired": {
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required",
    "prefix": "ptshr"
  },
  "propTypeString": {
    "body": ["PropTypes.string"],
    "description": "String prop type",
    "prefix": "pts"
  },
  "propTypeString": {
    "body": "PropTypes.string,",
    "description": "String prop type",
    "prefix": "pts"
  },
  "propTypeStringRequired": {
    "body": ["PropTypes.string.isRequired"],
    "description": "String prop type required",
    "prefix": "ptsr"
  },
  "propTypeStringRequired": {
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required",
    "prefix": "ptsr"
  },
  "reactArrowFunctionComponent": {
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "prefix": "rafc"
  },
  "reactArrowFunctionComponentWithPropTypes": {
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system with PropTypes",
    "prefix": "rafcp"
  },
  "reactArrowFunctionExportComponent": {
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "prefix": "rafce"
  },
  "reactClassCompoment": {
    "body": "import { Component } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1}",
    "description": "Creates a React component class",
    "prefix": "rcc"
  },
  "reactClassCompomentPropTypes": {
    "body": "import { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with PropTypes",
    "prefix": "rccp"
  },
  "reactClassCompomentWithMethods": {
    "body": "import { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with PropTypes and all lifecycle methods",
    "prefix": "rcfc"
  },
  "reactClassComponent": {
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system",
    "prefix": "rcc"
  },
  "reactClassComponentPropTypes": {
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  static propTypes = {${2:second}: ${3:third}}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with PropTypes and ES7 module system",
    "prefix": "rccp"
  },
  "reactClassComponentRedux": {
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with connected redux and ES7 module system",
    "prefix": "rcredux"
  },
  "reactClassComponentReduxPropTypes": {
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  static propTypes = {",
      "    ${2:second}: ${3:third}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with PropTypes with connected redux and ES7 module system",
    "prefix": "rcreduxp"
  },
  "reactClassExportComponent": {
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React component class with ES7 module system",
    "prefix": "rce"
  },
  "reactClassExportComponentWithPropTypes": {
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  static propTypes = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React component class with ES7 module system",
    "prefix": "rcep"
  },
  "reactClassExportPureComponent": {
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React pure component class with ES7 module system export",
    "prefix": "rpce"
  },
  "reactClassPureComponent": {
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React pure component class with ES7 module system",
    "prefix": "rpc"
  },
  "reactClassPureComponentWithPropTypes": {
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  static propTypes = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system",
    "prefix": "rpcp"
  },
  "reactFunctionalComponent": {
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "prefix": "rfc"
  },
  "reactFunctionalComponentRedux": {
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React functional component with connected redux and ES7 module system",
    "prefix": "rfcredux"
  },
  "reactFunctionalComponentReduxPropTypes": {
    "body": [
      "import PropTypes from 'prop-types'",
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  ${2:second}: PropTypes.${3:third}",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "DEPRECATED: Creates a React functional component with PropTypes with connected redux and ES7 module system",
    "prefix": "rfcreduxp"
  },
  "reactFunctionalComponentWithPropTypes": {
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes",
    "prefix": "rfcp"
  },
  "reactFunctionalExportComponent": {
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "prefix": "rfce"
  },
  "reactFunctionalViteComponent": {
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system, compatible with Vite",
    "prefix": "rfcv"
  },
  "reactFunctionComponent": {
    "body": "\nconst ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${TM_FILENAME_BASE}",
    "description": "Creates a React function component without PropTypes",
    "prefix": "rfc"
  },
  "reactFunctionComponentWithCustomName": {
    "body": "\nconst ${1:functionname} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:functionname}",
    "description": "Creates a React function component with custom name",
    "prefix": "rfcn"
  },
  "reactFunctionComponentWithEmotion": {
    "body": "import { css } from '@emotion/core'\n\nexport const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div css={css``}>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component with emotion",
    "prefix": "rfce"
  },
  "reactFunctionMemoComponent": {
    "body": [
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(() => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "})",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system",
    "prefix": "rmc"
  },
  "reactFunctionMemoComponentWithPropTypes": {
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo((props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system with PropTypes",
    "prefix": "rmcp"
  },
  "reactJustClassCompoment": {
    "body": "class ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
    "description": "Creates a React component class",
    "prefix": "rcjc"
  },
  "reactNativeComponent": {
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}"
    ],
    "prefix": "rnc"
  },
  "reactNativeComponentExport": {
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "prefix": "rnce"
  },
  "reactNativeComponentWithStyles": {
    "body": [
      "import { Text, StyleSheet, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "prefix": "rncs"
  },
  "reactNativeFunctionalComponent": {
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}"
    ],
    "prefix": "rnf"
  },
  "reactNativeFunctionalComponentWithStyles": {
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "prefix": "rnfs"
  },
  "reactNativeFunctionalExportComponent": {
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "prefix": "rnfe"
  },
  "reactNativeFunctionalExportComponentWithStyles": {
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "prefix": "rnfes"
  },
  "reactNativeImport": {
    "body": ["import { ${1:first} } from 'react-native'"],
    "prefix": "imrn"
  },
  "reactNativePureComponent": {
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}"
    ],
    "prefix": "rnpc"
  },
  "reactNativePureComponentExport": {
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { PureComponent } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "prefix": "rnpce"
  },
  "reactNativeStyles": {
    "body": ["const styles = StyleSheet.create({${1:first}})"],
    "prefix": "rnstyle"
  },
  "reactStatelessProps": {
    "body": "import { PropTypes } from 'react'\n\nconst ${TM_FILENAME_BASE} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t)\n}\n\n${1}.propTypes = {\n\t$0\n}\n\nexport default ${1}",
    "description": "Creates a React function component with PropTypes",
    "prefix": "rfcp"
  },
  "reduxAction": {
    "body": [
      "export const ${1:first} = (payload) => ({",
      "  type: ${2:second},",
      "  payload",
      "})",
      ""
    ],
    "prefix": "rxaction"
  },
  "reduxConst": {
    "body": ["export const ${1:first} = '${1:first}'"],
    "prefix": "rxconst"
  },
  "reduxReducer": {
    "body": [
      "const initialState = {}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "  switch (type) {",
      "",
      "  case ${1:first}:",
      "    return { ...state, ...payload }",
      "",
      "  default:",
      "    return state",
      "  }",
      "}",
      ""
    ],
    "prefix": "rxreducer"
  },
  "reduxSelector": {
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:first} = state => state.${2:second}"
    ],
    "prefix": "rxselect"
  },
  "reduxSlice": {
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: ${2:second},",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ],
    "prefix": "rxslice"
  },
  "setInterval": {
    "body": ["setInterval(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function at specified intervals",
    "prefix": "sti"
  },
  "setTimeOut": {
    "body": ["setTimeout(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function after the specified delay",
    "prefix": "sto"
  },
  "setupReactComponentTestWithRedux": {
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "     <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "Create test component",
    "prefix": "srtest"
  },
  "setupReactNativeTest": {
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "prefix": "sntest"
  },
  "setupReactNativeTestWithRedux": {
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "      <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "prefix": "snrtest"
  },
  "setupReactTest": {
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "prefix": "stest"
  },
  "shouldComponentUpdate": {
    "body": ["shouldComponentUpdate(nextProps, nextState) { ${1:first} }"],
    "description": "Invoked before rendering when new props or state are being received. ",
    "prefix": "scu"
  },
  "shouldComponentUpdate": {
    "body": "shouldComponentUpdate (nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. ",
    "prefix": "scu"
  },
  "testAsyncBlock": {
    "body": ["test('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing `asynchronous test` block",
    "prefix": "testa"
  },
  "testBlock": {
    "body": ["test('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `test` block",
    "prefix": "test"
  },
  "testBlock": {
    "body": ["test('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `test` block",
    "prefix": "test"
  },
  "typeofSnippet": {
    "body": ["typeof ${1:first}"],
    "prefix": "tpf"
  },
  "typescriptReactArrowFunctionComponent": {
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "prefix": "tsrafc"
  },
  "typescriptReactArrowFunctionExportComponent": {
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "prefix": "tsrafce"
  },
  "typescriptReactClassComponent": {
    "body": [
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}"
    ],
    "description": "Creates a React component class with ES7 module system and TypeScript interfaces",
    "prefix": "tsrcc"
  },
  "typescriptReactClassComponentRedux": {
    "body": [
      "import { connect } from 'react-redux'",
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with connected redux and ES7 module system and TypeScript interfaces",
    "prefix": "tsrcredux"
  },
  "typescriptReactClassExportComponent": {
    "body": [
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React component class with ES7 module system and TypeScript interfaces",
    "prefix": "tsrce"
  },
  "typescriptReactClassExportPureComponent": {
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "type Props = {}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React pure component class with ES7 module system and TypeScript interface",
    "prefix": "tsrpce"
  },
  "typescriptReactClassPureComponent": {
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "type Props = {}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}"
    ],
    "description": "Creates a React pure component class with ES7 module system and TypeScript interface",
    "prefix": "tsrpc"
  },
  "typescriptReactFunctionalComponent": {
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
    "prefix": "tsrfc"
  },
  "typescriptReactFunctionalExportComponent": {
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
    "prefix": "tsrfce"
  },
  "typescriptReactNativeArrowFunctionComponent": {
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system in TypeScript",
    "prefix": "tsrnf"
  },
  "typescriptReactNativeArrowFunctionComponentWithStyles": {
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet",
    "prefix": "tsrnfs"
  },
  "useCallback": {
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ],
    "prefix": "useCallbackSnippet"
  },
  "useCallback": {
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook",
    "prefix": "ucb"
  },
  "useContext": {
    "body": ["const ${1:first} = useContext(${2:second})"],
    "prefix": "useContextSnippet"
  },
  "useContext": {
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook",
    "prefix": "uc"
  },
  "useEffect": {
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ],
    "prefix": "useEffectSnippet"
  },
  "useEffect": {
    "body": ["useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
    "description": "React useEffect() hook",
    "prefix": "ue"
  },
  "useEffect with return": {
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook with return statement",
    "prefix": "uer"
  },
  "useImperativeHandle": {
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ],
    "prefix": "useImperativeHandleSnippet"
  },
  "useLayoutEffect": {
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ],
    "prefix": "useLayoutEffectSnippet"
  },
  "useMemo": {
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "prefix": "useMemoSnippet"
  },
  "useMemo": {
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook",
    "prefix": "ume"
  },
  "useReducer": {
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ],
    "prefix": "useReducerSnippet"
  },
  "useRef": {
    "body": ["const ${1:first} = useRef(${2:second})"],
    "prefix": "useRefSnippet"
  },
  "useRef": {
    "body": ["const ${1:elName}El = useRef(null)$0"],
    "description": "React useContext() hook",
    "prefix": "ur"
  },
  "useState": {
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ],
    "prefix": "useStateSnippet"
  },
  "useState": {
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initValue})$0",
    "description": "React useState() hook",
    "prefix": "us"
  }
}
